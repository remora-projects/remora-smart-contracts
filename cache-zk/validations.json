{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:AccessManagedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "authority()",
          "setAuthority(address)",
          "isConsumingScheduledOp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessManaged": [
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_authority",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:24"
              },
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_consumingSchedule",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:26"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:AccessManagerUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:62",
        "version": {
          "withMetadata": "64445769537b94adb47bc303a02d38785da43cc7d7c79f44406323e363f3b536",
          "withoutMetadata": "64445769537b94adb47bc303a02d38785da43cc7d7c79f44406323e363f3b536",
          "linkedWithoutMetadata": "64445769537b94adb47bc303a02d38785da43cc7d7c79f44406323e363f3b536"
        },
        "inherit": [
          "@openzeppelin/contracts/access/manager/IAccessManager.sol:IAccessManager",
          "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:MulticallUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "canCall(address,address,bytes4)",
          "expiration()",
          "minSetback()",
          "isTargetClosed(address)",
          "getTargetFunctionRole(address,bytes4)",
          "getTargetAdminDelay(address)",
          "getRoleAdmin(uint64)",
          "getRoleGuardian(uint64)",
          "getRoleGrantDelay(uint64)",
          "getAccess(uint64,address)",
          "hasRole(uint64,address)",
          "labelRole(uint64,string)",
          "grantRole(uint64,address,uint32)",
          "revokeRole(uint64,address)",
          "renounceRole(uint64,address)",
          "setRoleAdmin(uint64,uint64)",
          "setRoleGuardian(uint64,uint64)",
          "setGrantDelay(uint64,uint32)",
          "setTargetFunctionRole(address,bytes4[],uint64)",
          "setTargetAdminDelay(address,uint32)",
          "setTargetClosed(address,bool)",
          "getSchedule(bytes32)",
          "getNonce(bytes32)",
          "schedule(address,bytes,uint48)",
          "execute(address,bytes)",
          "cancel(address,address,bytes)",
          "consumeScheduledOp(address,bytes)",
          "hashOperation(address,address,bytes)",
          "updateAuthority(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_struct(TargetConfig)481_storage)": {
              "label": "mapping(address => struct AccessManagerUpgradeable.TargetConfig)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(TargetConfig)481_storage": {
              "label": "struct AccessManagerUpgradeable.TargetConfig",
              "members": [
                {
                  "label": "allowedRoles",
                  "type": "t_mapping(t_bytes4,t_uint64)"
                },
                {
                  "label": "adminDelay",
                  "type": "t_userDefinedValueType(Delay)13253"
                },
                {
                  "label": "closed",
                  "type": "t_bool"
                }
              ]
            },
            "t_mapping(t_bytes4,t_uint64)": {
              "label": "mapping(bytes4 => uint64)"
            },
            "t_userDefinedValueType(Delay)13253": {
              "label": "Time.Delay",
              "underlying": "t_uint112"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_mapping(t_uint64,t_struct(Role)500_storage)": {
              "label": "mapping(uint64 => struct AccessManagerUpgradeable.Role)"
            },
            "t_struct(Role)500_storage": {
              "label": "struct AccessManagerUpgradeable.Role",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_struct(Access)487_storage)"
                },
                {
                  "label": "admin",
                  "type": "t_uint64"
                },
                {
                  "label": "guardian",
                  "type": "t_uint64"
                },
                {
                  "label": "grantDelay",
                  "type": "t_userDefinedValueType(Delay)13253"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Access)487_storage)": {
              "label": "mapping(address => struct AccessManagerUpgradeable.Access)"
            },
            "t_struct(Access)487_storage": {
              "label": "struct AccessManagerUpgradeable.Access",
              "members": [
                {
                  "label": "since",
                  "type": "t_uint48"
                },
                {
                  "label": "delay",
                  "type": "t_userDefinedValueType(Delay)13253"
                }
              ]
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(Schedule)505_storage)": {
              "label": "mapping(bytes32 => struct AccessManagerUpgradeable.Schedule)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Schedule)505_storage": {
              "label": "struct AccessManagerUpgradeable.Schedule",
              "members": [
                {
                  "label": "timepoint",
                  "type": "t_uint48"
                },
                {
                  "label": "nonce",
                  "type": "t_uint32"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessManager": [
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_targets",
                "type": "t_mapping(t_address,t_struct(TargetConfig)481_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:114"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_uint64,t_struct(Role)500_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:115"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_schedules",
                "type": "t_mapping(t_bytes32,t_struct(Schedule)505_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:116"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_executionId",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:120"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:MulticallUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/manager/AuthorityUtils.sol:AuthorityUtils": {
        "src": "@openzeppelin/contracts/access/manager/AuthorityUtils.sol:8",
        "version": {
          "withMetadata": "8b51bc4eb80182a9b43aedaf2c0d76564edb6969ee59f58582d1ba5a95bf93aa",
          "withoutMetadata": "8b51bc4eb80182a9b43aedaf2c0d76564edb6969ee59f58582d1ba5a95bf93aa",
          "linkedWithoutMetadata": "8b51bc4eb80182a9b43aedaf2c0d76564edb6969ee59f58582d1ba5a95bf93aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged": {
        "src": "@openzeppelin/contracts/access/manager/IAccessManaged.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "authority()",
          "setAuthority(address)",
          "isConsumingScheduledOp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/manager/IAccessManager.sol:IAccessManager": {
        "src": "@openzeppelin/contracts/access/manager/IAccessManager.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canCall(address,address,bytes4)",
          "expiration()",
          "minSetback()",
          "isTargetClosed(address)",
          "getTargetFunctionRole(address,bytes4)",
          "getTargetAdminDelay(address)",
          "getRoleAdmin(uint64)",
          "getRoleGuardian(uint64)",
          "getRoleGrantDelay(uint64)",
          "getAccess(uint64,address)",
          "hasRole(uint64,address)",
          "labelRole(uint64,string)",
          "grantRole(uint64,address,uint32)",
          "revokeRole(uint64,address)",
          "renounceRole(uint64,address)",
          "setRoleAdmin(uint64,uint64)",
          "setRoleGuardian(uint64,uint64)",
          "setGrantDelay(uint64,uint32)",
          "setTargetFunctionRole(address,bytes4[],uint64)",
          "setTargetAdminDelay(address,uint32)",
          "setTargetClosed(address,bool)",
          "getSchedule(bytes32)",
          "getNonce(bytes32)",
          "schedule(address,bytes,uint48)",
          "execute(address,bytes)",
          "cancel(address,address,bytes)",
          "consumeScheduledOp(address,bytes)",
          "hashOperation(address,address,bytes)",
          "updateAuthority(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/manager/IAuthority.sol:IAuthority": {
        "src": "@openzeppelin/contracts/access/manager/IAuthority.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canCall(address,address,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "03624f9071456b47a6c8a7651b17bc432813a31a7a06c693e1cfe13770d28067",
          "withoutMetadata": "03624f9071456b47a6c8a7651b17bc432813a31a7a06c693e1cfe13770d28067",
          "linkedWithoutMetadata": "03624f9071456b47a6c8a7651b17bc432813a31a7a06c693e1cfe13770d28067"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:39"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "e2d34fa6edd93e70cd4641fd356f66488a0f4fafbf99ec913870f3d227e089f6",
          "withoutMetadata": "e2d34fa6edd93e70cd4641fd356f66488a0f4fafbf99ec913870f3d227e089f6",
          "linkedWithoutMetadata": "e2d34fa6edd93e70cd4641fd356f66488a0f4fafbf99ec913870f3d227e089f6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "cadd3b8c9b1f7294f1710b948a990db337eb5b458c44450b3db2e97d32129d33",
          "withoutMetadata": "cadd3b8c9b1f7294f1710b948a990db337eb5b458c44450b3db2e97d32129d33",
          "linkedWithoutMetadata": "cadd3b8c9b1f7294f1710b948a990db337eb5b458c44450b3db2e97d32129d33"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "4a2510aaa314c497b2acc59bb2b5e4e67ab602b14f72da6e572dfa61be69f65e",
          "withoutMetadata": "4a2510aaa314c497b2acc59bb2b5e4e67ab602b14f72da6e572dfa61be69f65e",
          "linkedWithoutMetadata": "4a2510aaa314c497b2acc59bb2b5e4e67ab602b14f72da6e572dfa61be69f65e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Nonces.sol:Nonces": {
        "src": "@openzeppelin/contracts/utils/Nonces.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Nonces",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "6aaae3cc956b3efcaf5254c6b3566d294a76d394a1fdf47f7c24c032f743aff4",
          "withoutMetadata": "6aaae3cc956b3efcaf5254c6b3566d294a76d394a1fdf47f7c24c032f743aff4",
          "linkedWithoutMetadata": "6aaae3cc956b3efcaf5254c6b3566d294a76d394a1fdf47f7c24c032f743aff4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "53fa6010a4dc105bcbfa3cb4f833505c08f9b926f9cd0fc5bce79ba60ac6a345",
          "withoutMetadata": "53fa6010a4dc105bcbfa3cb4f833505c08f9b926f9cd0fc5bce79ba60ac6a345",
          "linkedWithoutMetadata": "53fa6010a4dc105bcbfa3cb4f833505c08f9b926f9cd0fc5bce79ba60ac6a345"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "ee306ac70ff5b15ee44425b4f955d06c4debf3842b3e982a7412c6efe07801de",
          "withoutMetadata": "ee306ac70ff5b15ee44425b4f955d06c4debf3842b3e982a7412c6efe07801de",
          "linkedWithoutMetadata": "ee306ac70ff5b15ee44425b4f955d06c4debf3842b3e982a7412c6efe07801de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "555a48ab570f37084a459139bc8dc058771d3e46dd7d6eca2fd4e415d7f4a02c",
          "withoutMetadata": "555a48ab570f37084a459139bc8dc058771d3e46dd7d6eca2fd4e415d7f4a02c",
          "linkedWithoutMetadata": "555a48ab570f37084a459139bc8dc058771d3e46dd7d6eca2fd4e415d7f4a02c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b29d937d4a931523af7b779aab6e600b8fc60f741b484c03d789733b4ccb7a1a",
          "withoutMetadata": "b29d937d4a931523af7b779aab6e600b8fc60f741b484c03d789733b4ccb7a1a",
          "linkedWithoutMetadata": "b29d937d4a931523af7b779aab6e600b8fc60f741b484c03d789733b4ccb7a1a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EIP712",
              "label": "_nameFallback",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:51"
            },
            {
              "contract": "EIP712",
              "label": "_versionFallback",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "5bb052f261b7c5e0d63ef4f8f227c02a7e512499a0c04c7149f7f2f1a1de5568",
          "withoutMetadata": "5bb052f261b7c5e0d63ef4f8f227c02a7e512499a0c04c7149f7f2f1a1de5568",
          "linkedWithoutMetadata": "5bb052f261b7c5e0d63ef4f8f227c02a7e512499a0c04c7149f7f2f1a1de5568"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "2ebe78e1fecde843706f01a0cd2181d6bf00b88ca69dacffaeee62213ae02689",
          "withoutMetadata": "2ebe78e1fecde843706f01a0cd2181d6bf00b88ca69dacffaeee62213ae02689",
          "linkedWithoutMetadata": "2ebe78e1fecde843706f01a0cd2181d6bf00b88ca69dacffaeee62213ae02689"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "9cf7904fedf35ae7ab2b3ccb2314a81d8af7dcd8d913dcb935ed4a14eb422c8b",
          "withoutMetadata": "9cf7904fedf35ae7ab2b3ccb2314a81d8af7dcd8d913dcb935ed4a14eb422c8b",
          "linkedWithoutMetadata": "9cf7904fedf35ae7ab2b3ccb2314a81d8af7dcd8d913dcb935ed4a14eb422c8b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "846ea45dc6f1bc6888d78766cbb133bfbef475dc6d5882bfa4274e71034ed724",
          "withoutMetadata": "846ea45dc6f1bc6888d78766cbb133bfbef475dc6d5882bfa4274e71034ed724",
          "linkedWithoutMetadata": "846ea45dc6f1bc6888d78766cbb133bfbef475dc6d5882bfa4274e71034ed724"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/types/Time.sol:Time": {
        "src": "@openzeppelin/contracts/utils/types/Time.sol:20",
        "version": {
          "withMetadata": "5fcbf627d831932eeee5c76bf787e23fd56b57db411338d66894909ba1629349",
          "withoutMetadata": "5fcbf627d831932eeee5c76bf787e23fd56b57db411338d66894909ba1629349",
          "linkedWithoutMetadata": "5fcbf627d831932eeee5c76bf787e23fd56b57db411338d66894909ba1629349"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/ForTestingOnly/RMRA.sol:RMRA": {
        "src": "contracts/ForTestingOnly/RMRA.sol:8",
        "version": {
          "withMetadata": "58ab9b4c7abd74106d8976ef9013e225ca9dda9ad304ceabdb39c94d26547ecf",
          "withoutMetadata": "58ab9b4c7abd74106d8976ef9013e225ca9dda9ad304ceabdb39c94d26547ecf",
          "linkedWithoutMetadata": "58ab9b4c7abd74106d8976ef9013e225ca9dda9ad304ceabdb39c94d26547ecf"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RMRA",
            "src": "contracts/ForTestingOnly/RMRA.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/ForTestingOnly/Stablecoin.sol:Stablecoin": {
        "src": "contracts/ForTestingOnly/Stablecoin.sol:8",
        "version": {
          "withMetadata": "f41be3591e86af0f97cc353ccf046934e1a6f95e715129027344df3cee93c2be",
          "withoutMetadata": "f41be3591e86af0f97cc353ccf046934e1a6f95e715129027344df3cee93c2be",
          "linkedWithoutMetadata": "f41be3591e86af0f97cc353ccf046934e1a6f95e715129027344df3cee93c2be"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Stablecoin",
            "src": "contracts/ForTestingOnly/Stablecoin.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RWAToken/RemoraRWABurnable.sol:RemoraRWABurnable": {
        "src": "contracts/RWAToken/RemoraRWABurnable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burnable()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:remora.storage.Burnable": [
              {
                "contract": "RemoraRWABurnable",
                "label": "_burnable",
                "type": "t_bool",
                "src": "contracts/RWAToken/RemoraRWABurnable.sol:28"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RWAToken/RemoraRWAHolderManagement.sol:RemoraRWAHolderManagement": {
        "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:AccessManagedUpgradeable",
          "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFeePercentage(uint256)",
          "changeStablecoin(address)",
          "changeWallet(address)",
          "freezeHolder(address)",
          "unFreezeHolder(address)",
          "distributeRentalPayments(uint256)",
          "withdraw(bool,uint256)",
          "isHolderFrozen(address)",
          "rentBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)6442": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_struct(HolderStatus)13813_storage)": {
              "label": "mapping(address => struct RemoraRWAHolderManagement.HolderStatus)"
            },
            "t_struct(HolderStatus)13813_storage": {
              "label": "struct RemoraRWAHolderManagement.HolderStatus",
              "members": [
                {
                  "label": "isFrozen",
                  "type": "t_bool"
                },
                {
                  "label": "isCalculated",
                  "type": "t_bool"
                },
                {
                  "label": "frozenIndex",
                  "type": "t_uint8"
                },
                {
                  "label": "lastPayoutIndexCalculated",
                  "type": "t_uint8"
                },
                {
                  "label": "numEntries",
                  "type": "t_uint8"
                },
                {
                  "label": "mostRecentEntry",
                  "type": "t_uint8"
                },
                {
                  "label": "calculatedPayout",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage))": {
              "label": "mapping(address => mapping(uint8 => struct RemoraRWAHolderManagement.TokenBalanceChange))"
            },
            "t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage)": {
              "label": "mapping(uint8 => struct RemoraRWAHolderManagement.TokenBalanceChange)"
            },
            "t_struct(TokenBalanceChange)13819_storage": {
              "label": "struct RemoraRWAHolderManagement.TokenBalanceChange",
              "members": [
                {
                  "label": "isValid",
                  "type": "t_bool"
                },
                {
                  "label": "tokenBalance",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:remora.storage.HolderManagement": [
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_wallet",
                "type": "t_address",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:53"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_stablecoin",
                "type": "t_contract(IERC20)6442",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:55"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_feePercentage",
                "type": "t_uint256",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:57"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_currentPayoutIndex",
                "type": "t_uint8",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:59"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_payouts",
                "type": "t_mapping(t_uint256,t_uint256)",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:61"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_holderStatus",
                "type": "t_mapping(t_address,t_struct(HolderStatus)13813_storage)",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:63"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_balanceHistory",
                "type": "t_mapping(t_address,t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage))",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:65"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.AccessManaged": [
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_authority",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:24"
              },
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_consumingSchedule",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:26"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RWAToken/RemoraRWAToken.sol:Allowlist": {
        "src": "contracts/RWAToken/RemoraRWAToken.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exchangeAllowed(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RWAToken/RemoraRWAToken.sol:RemoraRWAToken": {
        "src": "contracts/RWAToken/RemoraRWAToken.sol:22",
        "version": {
          "withMetadata": "f01b65c8d3776d7185327064df420c37c2ee6a00bbd8d32a812d7d88ea564e6d",
          "withoutMetadata": "f01b65c8d3776d7185327064df420c37c2ee6a00bbd8d32a812d7d88ea564e6d",
          "linkedWithoutMetadata": "f01b65c8d3776d7185327064df420c37c2ee6a00bbd8d32a812d7d88ea564e6d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "contracts/RWAToken/RemoraRWAHolderManagement.sol:RemoraRWAHolderManagement",
          "contracts/RWAToken/RemoraRWABurnable.sol:RemoraRWABurnable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:AccessManagedUpgradeable",
          "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,string,string,uint256,address,address,address,uint256)",
          "claimRent()",
          "adminClaimRent(address,bool,bool,uint256)",
          "adminTransferFrom(address,address,uint256)",
          "updateAllowList(address)",
          "mint(address,uint256)",
          "pause()",
          "unpause()",
          "enableBurning()",
          "disableBurning()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RemoraRWAToken",
              "label": "_allowlist",
              "type": "t_contract(Allowlist)14834",
              "src": "contracts/RWAToken/RemoraRWAToken.sol:30"
            }
          ],
          "types": {
            "t_contract(Allowlist)14834": {
              "label": "contract Allowlist"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)6442": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_address,t_struct(HolderStatus)13813_storage)": {
              "label": "mapping(address => struct RemoraRWAHolderManagement.HolderStatus)"
            },
            "t_struct(HolderStatus)13813_storage": {
              "label": "struct RemoraRWAHolderManagement.HolderStatus",
              "members": [
                {
                  "label": "isFrozen",
                  "type": "t_bool"
                },
                {
                  "label": "isCalculated",
                  "type": "t_bool"
                },
                {
                  "label": "frozenIndex",
                  "type": "t_uint8"
                },
                {
                  "label": "lastPayoutIndexCalculated",
                  "type": "t_uint8"
                },
                {
                  "label": "numEntries",
                  "type": "t_uint8"
                },
                {
                  "label": "mostRecentEntry",
                  "type": "t_uint8"
                },
                {
                  "label": "calculatedPayout",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage))": {
              "label": "mapping(address => mapping(uint8 => struct RemoraRWAHolderManagement.TokenBalanceChange))"
            },
            "t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage)": {
              "label": "mapping(uint8 => struct RemoraRWAHolderManagement.TokenBalanceChange)"
            },
            "t_struct(TokenBalanceChange)13819_storage": {
              "label": "struct RemoraRWAHolderManagement.TokenBalanceChange",
              "members": [
                {
                  "label": "isValid",
                  "type": "t_bool"
                },
                {
                  "label": "tokenBalance",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:remora.storage.HolderManagement": [
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_wallet",
                "type": "t_address",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:53"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_stablecoin",
                "type": "t_contract(IERC20)6442",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:55"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_feePercentage",
                "type": "t_uint256",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:57"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_currentPayoutIndex",
                "type": "t_uint8",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:59"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_payouts",
                "type": "t_mapping(t_uint256,t_uint256)",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:61"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_holderStatus",
                "type": "t_mapping(t_address,t_struct(HolderStatus)13813_storage)",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:63"
              },
              {
                "contract": "RemoraRWAHolderManagement",
                "label": "_balanceHistory",
                "type": "t_mapping(t_address,t_mapping(t_uint8,t_struct(TokenBalanceChange)13819_storage))",
                "src": "contracts/RWAToken/RemoraRWAHolderManagement.sol:65"
              }
            ],
            "erc7201:remora.storage.Burnable": [
              {
                "contract": "RemoraRWABurnable",
                "label": "_burnable",
                "type": "t_bool",
                "src": "contracts/RWAToken/RemoraRWABurnable.sol:28"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.AccessManaged": [
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_authority",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:24"
              },
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_consumingSchedule",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:26"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RemoraAllowList.sol:RemoraAllowlist": {
        "src": "contracts/RemoraAllowList.sol:15",
        "version": {
          "withMetadata": "2fc1a974f0f7f9a625c2f75e2208b44814dda651bd284fec03c98d160b137dff",
          "withoutMetadata": "2fc1a974f0f7f9a625c2f75e2208b44814dda651bd284fec03c98d160b137dff",
          "linkedWithoutMetadata": "2fc1a974f0f7f9a625c2f75e2208b44814dda651bd284fec03c98d160b137dff"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:AccessManagedUpgradeable",
          "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address)",
          "exchangeAllowed(address,address)",
          "allowUser(address)",
          "disallowUser(address)",
          "allowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RemoraAllowlist",
              "label": "_allowed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/RemoraAllowList.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessManaged": [
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_authority",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:24"
              },
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_consumingSchedule",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:26"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/RemoraManager.sol:RemoraManager": {
        "src": "contracts/RemoraManager.sol:15",
        "version": {
          "withMetadata": "9e9611dcf8b3a64aceebca833bf691cb9f9d57034ff28f7abf93a96072f922a2",
          "withoutMetadata": "9e9611dcf8b3a64aceebca833bf691cb9f9d57034ff28f7abf93a96072f922a2",
          "linkedWithoutMetadata": "9e9611dcf8b3a64aceebca833bf691cb9f9d57034ff28f7abf93a96072f922a2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:AccessManagerUpgradeable",
          "@openzeppelin/contracts/access/manager/IAccessManager.sol:IAccessManager",
          "@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol:MulticallUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(TargetConfig)481_storage)": {
              "label": "mapping(address => struct AccessManagerUpgradeable.TargetConfig)"
            },
            "t_struct(TargetConfig)481_storage": {
              "label": "struct AccessManagerUpgradeable.TargetConfig",
              "members": [
                {
                  "label": "allowedRoles",
                  "type": "t_mapping(t_bytes4,t_uint64)"
                },
                {
                  "label": "adminDelay",
                  "type": "t_userDefinedValueType(Delay)13253"
                },
                {
                  "label": "closed",
                  "type": "t_bool"
                }
              ]
            },
            "t_mapping(t_bytes4,t_uint64)": {
              "label": "mapping(bytes4 => uint64)"
            },
            "t_userDefinedValueType(Delay)13253": {
              "label": "Time.Delay",
              "underlying": "t_uint112"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_mapping(t_uint64,t_struct(Role)500_storage)": {
              "label": "mapping(uint64 => struct AccessManagerUpgradeable.Role)"
            },
            "t_struct(Role)500_storage": {
              "label": "struct AccessManagerUpgradeable.Role",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_struct(Access)487_storage)"
                },
                {
                  "label": "admin",
                  "type": "t_uint64"
                },
                {
                  "label": "guardian",
                  "type": "t_uint64"
                },
                {
                  "label": "grantDelay",
                  "type": "t_userDefinedValueType(Delay)13253"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Access)487_storage)": {
              "label": "mapping(address => struct AccessManagerUpgradeable.Access)"
            },
            "t_struct(Access)487_storage": {
              "label": "struct AccessManagerUpgradeable.Access",
              "members": [
                {
                  "label": "since",
                  "type": "t_uint48"
                },
                {
                  "label": "delay",
                  "type": "t_userDefinedValueType(Delay)13253"
                }
              ]
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(Schedule)505_storage)": {
              "label": "mapping(bytes32 => struct AccessManagerUpgradeable.Schedule)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Schedule)505_storage": {
              "label": "struct AccessManagerUpgradeable.Schedule",
              "members": [
                {
                  "label": "timepoint",
                  "type": "t_uint48"
                },
                {
                  "label": "nonce",
                  "type": "t_uint32"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.AccessManager": [
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_targets",
                "type": "t_mapping(t_address,t_struct(TargetConfig)481_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:114"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_uint64,t_struct(Role)500_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:115"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_schedules",
                "type": "t_mapping(t_bytes32,t_struct(Schedule)505_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:116"
              },
              {
                "contract": "AccessManagerUpgradeable",
                "label": "_executionId",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagerUpgradeable.sol:120"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/SaleIntermediary.sol:RemoraSaleIntermediary": {
        "src": "contracts/SaleIntermediary.sol:16",
        "version": {
          "withMetadata": "a282035361934ae822aa8ee324a682bbce264eef68e164d73b1cb2df6be233d6",
          "withoutMetadata": "a282035361934ae822aa8ee324a682bbce264eef68e164d73b1cb2df6be233d6",
          "linkedWithoutMetadata": "a282035361934ae822aa8ee324a682bbce264eef68e164d73b1cb2df6be233d6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:AccessManagedUpgradeable",
          "@openzeppelin/contracts/access/manager/IAccessManaged.sol:IAccessManaged",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "facilitateSwap(address,address,address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessManaged": [
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_authority",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:24"
              },
              {
                "contract": "AccessManagedUpgradeable",
                "label": "_consumingSchedule",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/access/manager/AccessManagedUpgradeable.sol:26"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}